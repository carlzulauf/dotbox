#!/usr/bin/env ruby

# Starts the dokku platform-in-a-box, in a container. Assumes podman installed and current user has access to the podman socket.
#
# A container that manages containers. Amazing.

# SSH into dokku container: ssh -p 3022 dokku@dokku.localdev

require 'pry'
require "json"
require "open3"

def r(*cmd, capture: false)
  cmd = cmd.join(' ')
  log "$ #{cmd}"
  return system(cmd) unless capture

  out, err, status = Open3.capture3(cmd)
  log "ERROR -> #{err}" unless err.empty?
  out
end

def log(msg)
  puts "[#{Time.now.strftime('%Y-%m-%d %H:%M:%S')}] #{msg}"
end

# user = ENV["USER"]
uid = Process.uid
local_files = File.expand_path("~/.local/dokku")

version = "0.29.4"

# should be able to replace these with docker details
imager = "podman"
imager_socket = "/run/user/#{uid}/podman/podman.sock"

image_name = "docker.io/dokku/dokku:#{version}"

ssh_port  = 3022
http_port = 8080
ssl_port  = 8443

run_options = <<~PODMANOPTIONS.lines(chomp: true)
  --env DOKKU_HOSTNAME=dokku.me
  --env DOKKU_HOST_ROOT=/var/lib/dokku/home/dokku
  --name dokku
  --publish #{ssh_port}:22
  --publish #{http_port}:80
  --publish #{ssl_port}:443
  --volume #{local_files}:/mnt/dokku
  --volume #{imager_socket}:/var/run/docker.sock
  --detach
PODMANOPTIONS

images = JSON.parse(`podman images --format json`)
if images.any? { |i| i["Names"].member?(image_name) }
  log "Existing dokku image found"
else
  r "podman pull #{image_name}"
end

containers = JSON.parse(`podman container list --all --format json`)
if containers.any? { |c| c["Image"] == image_name }
  r "podman container start dokku"
else
  r "podman container run", *run_options, "dokku/dokku:#{version}"
end

r "podman exec -it -w /root dokku bash"

log "dokku bash exited, stopping container"

r "podman container stop dokku"
