#!/usr/bin/env ruby

require "optparse"
require "open3"
require "fileutils"
require "shellwords"

DEFAULT_DIR = "~/.local/share/postgres"

# initdb --locale en_US.UTF-8 -D ~/.local/share/postgres/data
# postgresql-check-db-dir ~/.local/share/postgres/data
# postgres -D ~/.local/share/postgres/data -k ~/.local/share/postgres

class Script < Struct.new(:options)
  def self.parse_options(argv)
    options = {
      dir: File.expand_path(DEFAULT_DIR),
      init: true,
      version: "latest",
    }

    args = OptionParser.new do |op|
      op.banner = "Usage: pg-box [options]"

      op.on("-x DISTROBOX", "--distrobox DISTROBOX", "Specify existing distrobox to use. Must have postgres installed.") do |distrobox|
        options[:distrobox] = distrobox
      end

      op.on("-d DIR", "--dir DIR", "Postgres working+data dir. Default is #{DEFAULT_DIR}") do |dir|
        options[:dir] = File.expand_path(dir)
      end

      op.on("-v VERSION", "--version VERSION", "Version of postgres container to pull. Default is latest.") do |version|
        options[:version] = version
      end

      op.on("--no-init", "Don't try to initialize if db dir check fails") do
        options[:init] = false
      end

      op.on("-h", "--help") do
        puts op
        exit
      end
    end.parse(argv)

    self.new options
  end

  def call
    find_or_create_postgres_box unless options[:distrobox]

    init_data_dir if options[:init] && !File.exist?(data_dir)

    puts "Running postgres on distrobox '#{options[:distrobox]}'"
    dbx_exec("postgres -D #{data_dir} -k #{options[:dir]}")
  end

  def data_dir
    File.join(options[:dir], "data")
  end

  def dbx_exec(cmd)
    cmd = "distrobox enter #{options[:distrobox]} -- #{cmd}"
    puts "$ #{cmd}"
    system cmd
  end

  def init_data_dir
    FileUtils.mkpath(data_dir)
    # initdb --locale en_US.UTF-8 -D ~/.local/share/postgres/data
    dbx_exec("initdb --locale en_US.UTF-8 -D #{Shellwords.escape(data_dir)}")
  end

  def find_or_create_postgres_box
    list = `distrobox list --no-color`.lines.map{|l| l.split("|").map(&:strip) }
    existing_boxes = list[1..].map { |box| list[0].zip(box).to_h }
    version = "postgres:#{options[:version]}"
    name = options[:version] == "latest" ? "pg" : version.gsub(/[:\.]/, '_')

    if existing_boxes.none? { |box| box["NAME"] == name }
      puts "Creating distrobox from docker.io/postgres container"
      cmd = "distrobox create --image docker.io/#{version} --name #{name} --pull"

      puts "$ #{cmd}"
      system cmd
    end

    options[:distrobox] = name
  end
end

Script.parse_options(ARGV).()
