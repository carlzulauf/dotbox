#!/usr/bin/env ruby

require "yaml"
require "open3"

# Usage:
# tproj <- get a list of available projects (configured below)
# tproj project-name <- start or resume a specific project

# looks in ~/.config/tproj.conf for project configs
DEBUG = false

class Project
  attr_reader :options

  def initialize(options)
    @options  = options
  end

  def dir
    options.fetch("dir") { Dir.pwd }
  end

  def abbr
    options.fetch("abbr") { rand(0..0xffff).to_s(16) }
  end

  def names
    options.fetch("names") { [abbr] }
  end

  def windows
    [
      options.fetch("windows") { 1 },
      commands.count,
      labels.count
    ].max
  end

  def commands
    options.fetch("commands") { [] }
  end

  def labels
    options.fetch("labels") { [] }
  end

  def start
    options.fetch("start") { false }
  end

  def tmux_cmd(*args)
    box = options["distrobox"]
    base = if box
      "distrobox-enter #{box} -- tmux -S ~/.local/share/tmux-#{box}.sock"
    else
      "tmux"
    end
    return base unless args.any?
    [base, *args].join(" ")
  end
end

def default_config_path
  File.expand_path("~/.config/tproj.yml")
end

def fatal_error(msg, exit_status = 1)
  STDERR.puts msg
  exit exit_status
end

def projects(path = default_config_path)
  YAML.load_file(path).map { |config| Project.new(config) }
end

def create_project(abbr, dir, windows = 1, *_)
  windows = [windows.to_i, 1].max
  Project.new({
    "abbr"    => abbr,
    "dir"     => dir,
    "windows" => windows,
  })
end

def find_project(name)
  projects.each do |project|
    return project if project.names.member?(name)
  end
  fatal_error "Project not found: #{ARGV[0].inspect}"
end

def find_existing_sessions(proj)
  cmd = proj.tmux_cmd("list-sessions")
  puts "$ #{cmd}" if DEBUG
  stdout, _stderr, status = Open3.capture3(cmd)
  return [] if !status.success?
  stdout.split("\n").map {|line| line.split(":").first }
end

def find_current_project(abbr = nil, window = nil, *others)
  # if user specifies both abbr and window, assume we want a new project
  return create_project(abbr, window, *others) if abbr && window
  # if just an abbreviation, look it up
  return find_project(abbr) if abbr
  # otherwise, print out usage
  names = projects.map(&:abbr).join(", ")
  puts "Example: tproj project-name"
  puts "Example: tproj abbr dir [windows=1]"
  puts "Available projects: #{names}"
  exit
end

def set_terminal_title(title)
  print "\033]0;#{title}\007"
end

def run(cmd)
  puts "$ #{cmd}" if DEBUG
  system cmd
end

# Convert a command into a set of tmux send-keys values
def keys_escape(cmd)
  # convert 'word1 word2' to 'word1 Space word2'
  cmd.gsub(/\s+/, ' Space ')
end

current = find_current_project(*ARGV)
set_terminal_title("tmux: #{current.names.first}")

if find_existing_sessions(current).member?(current.abbr)
  cmd = current.tmux_cmd("attach -t #{current.abbr}")
  puts "> #{cmd}" if DEBUG
  exec cmd
  # ^ replaces process, so execution stops there
end

# start building up a new tmux session
Dir.chdir File.expand_path(current.dir)
run current.tmux_cmd("new -s #{current.abbr} -d")
delayed = []
1.step(to: current.windows) do |n|
  cmd, label = current.commands[n - 1], current.labels[n - 1]
  run current.tmux_cmd("new-window -t #{current.abbr}") unless n == 1
  if cmd
    tmux_cmd_parts = [
      "send-keys",
      "-t",
      "#{current.abbr}:#{n}",
      keys_escape(cmd),
    ]
    tmux_cmd_parts << "Enter" if cmd && current.start
    full_tmux_cmd = current.tmux_cmd(*tmux_cmd_parts)
    puts "DELAYED$ #{full_tmux_cmd}" if DEBUG
    delayed << full_tmux_cmd
  end
  if label
    run current.tmux_cmd("rename-window -t #{current.abbr}:#{n}", label)
  end
end

if delayed.any?
  sleep 1 # give shell a chance so prompt is drawn before keys
  delayed.each { |cmd| system(*cmd) }
end

# move back to first window in case we aren't there anymore
run current.tmux_cmd("select-window -t #{current.abbr}:1")
# finally, attach to the new session
exec current.tmux_cmd("attach -t #{current.abbr}")
