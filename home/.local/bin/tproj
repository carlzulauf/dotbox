#!/usr/bin/env ruby

require "yaml"
require "open3"
require "optparse"

# Usage:
# tproj <- get a list of available projects (configured below)
# tproj project-name <- start or resume a specific project

# looks in ~/.config/tproj.conf for project configs
@debug = true

class Project
  OVERWRITEABLE = %w[dir windows start distrobox detach]
  attr_reader :options

  def initialize(options)
    @options  = options
  end

  def apply(other_options)
    OVERWRITEABLE.each do |key|
      options[key] = other_options[key] if other_options.key?(key)
    end
  end

  def dir
    File.expand_path(options.fetch("dir") { Dir.pwd })
  end

  def abbr
    options.fetch("abbr") { rand(0..0xffff).to_s(16) }
  end

  def names
    [abbr, *options.fetch("names", [])].uniq
  end

  def windows
    [
      options.fetch("windows") { 1 },
      commands.count,
      labels.count
    ].max
  end

  def commands
    options.fetch("commands") { [] }
  end

  def labels
    options.fetch("labels") { [] }
  end

  def start
    options.fetch("start") { false }
  end

  def attach?
    !options["detach"]
  end

  def tmux_cmd(*args)
    box = options["distrobox"]
    return ["tmux", *args].join(" ") unless box

    tmux_parts = ["tmux -S ~/.local/share/tmux-#{box}.sock", *args].join(" ")
    "distrobox-enter #{box} -- #{tmux_parts}"
  end
end

def parse_options(argv)
  options = {}
  args = OptionParser.new do |op|
    op.banner = "Usage: tproj [options] [project_name] [dir]"

    op.on("-a ABBR", "--abbr ABBR", "Abbreviation for project. Used as tmux session name.") do |abbr|
      options["abbr"] = abbr
    end

    op.on("-d DIR", "--dir DIR", "Project working directory") do |dir|
      options["dir"] = dir
    end

    op.on("-w WINDOWS", "--windows WINDOWS", Integer, "Number of tmux windows in project") do |windows|
      options["windows"] = [windows, 1].max
    end

    op.on("--[no-]start", "Overrides project start option for pre-filled commands") do |start|
      options["start"] = start
    end

    op.on("-x [DISTROBOX]", "--distrobox [DISTROBOX]", "Create tmux session within specified distrobox. If blank, run on host (no distrobox).") do |distrobox|
      options["distrobox"] = distrobox
    end

    op.on("--detach", "Do not attach to the created tmux session") do
      options["detach"] = true
    end

    # useful if session needs to wait for difficult to status services
    op.on("--delay SECONDS", Float, "Number of seconds to wait before starting session") do |seconds|
      sleep seconds
    end

    op.on("-h", "--help") do
      puts op
      puts example_usage
    end
  end.parse(argv)
  options["abbr"] = args.shift if args.any? && !options["abbr"]
  options["dir"] = args.shift if args.any? && !options["dir"]
  options
end

def default_config_path
  File.expand_path("~/.config/tproj.yml")
end

def fatal_error(msg, exit_status = 1)
  STDERR.puts msg
  exit exit_status
end

def projects(path = default_config_path)
  YAML.load_file(path).map { |config| Project.new(config) }
end

def create_project(abbr, dir, windows = 1, *_)
  windows = [windows.to_i, 1].max
  Project.new({
    "abbr"    => abbr,
    "dir"     => dir,
    "windows" => windows,
  })
end

def find_project(name)
  projects.each do |project|
    return project if project.names.member?(name)
  end
  nil
end

def find_existing_sessions(proj)
  cmd = proj.tmux_cmd("list-sessions")
  puts "$ #{cmd}" if @debug
  stdout, _stderr, status = Open3.capture3(cmd)
  if status.success?
    stdout.split("\n").map {|line| line.split(":").first }
  else
    puts "Error: #{_stderr}"
    []
  end
end

def example_usage
  puts <<~HELPTEXT
    Examples:

      $ tproj project-name
      $ tproj abbr path/to/project
      $ tproj --distrobox=arch-asdf --windows=5 my-project
      $ tproj --abbr=acab --dir=projects/police-brutality --windows=2

    Pre-configured projects: #{projects.map(&:abbr).join(', ')}
  HELPTEXT
  exit
end

def find_or_create_project(options)
  return unless options["abbr"]

  # see if it already exists
  project = find_project(options["abbr"])
  return project if project

  # if we have any of these options besides just abbr
  if %w[dir distrobox windows].any? { |key| options[key] }
    Project.new(options)
  end
end

def set_terminal_title(title)
  print "\033]0;#{title}\007"
end

def run(cmd)
  puts "$ #{cmd}" if @debug
  system cmd
end

# Convert a command into a set of tmux send-keys values
def keys_escape(cmd)
  # encapsulate in quotes and quote existing quotes
  cmd.inspect
end

options = parse_options(ARGV)

current = find_or_create_project(options)
example_usage unless current
current.apply(options)

set_terminal_title("tmux: #{current.names.first}")

if find_existing_sessions(current).member?(current.abbr)
  cmd = current.tmux_cmd("attach -t #{current.abbr}")
  puts "> #{cmd}" if @debug
  exec cmd
  # ^ replaces process, so execution stops there
end

# start building up a new tmux session
run current.tmux_cmd("new -s #{current.abbr} -c #{current.dir} -d")
delayed = []
1.step(to: current.windows) do |n|
  cmd, label = current.commands[n - 1], current.labels[n - 1]
  run current.tmux_cmd("new-window -t #{current.abbr} -c #{current.dir}") unless n == 1
  if cmd
    tmux_cmd_parts = [
      "send-keys",
      "-t",
      "#{current.abbr}:#{n}",
      keys_escape(cmd),
    ]
    tmux_cmd_parts << "Enter" if cmd && current.start
    full_tmux_cmd = current.tmux_cmd(*tmux_cmd_parts)
    puts "DELAYED$ #{full_tmux_cmd}" if @debug
    delayed << full_tmux_cmd
  end
  if label
    run current.tmux_cmd("rename-window -t #{current.abbr}:#{n}", label)
  end
end

if delayed.any?
  sleep 1 # give shell a chance so prompt is drawn before keys
  delayed.each { |cmd| system(*cmd) }
end

# move back to first window in case we aren't there anymore
run current.tmux_cmd("select-window -t #{current.abbr}:1")
# finally, attach to the new session
if current.attach?
  cmd = current.tmux_cmd("attach -t #{current.abbr}")
  puts "> #{cmd}" if @debug
  exec cmd
end
